import os
import cv2
import numpy as np
from flask import Flask, request, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
import uuid
from datetime import datetime, timedelta

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///faceswap.db'
app.config['JWT_SECRET_KEY'] = 'your_super_secret_key'
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(hours=1)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['RESULT_FOLDER'] = 'results'
app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg'}

# Create directories if they don't exist
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['RESULT_FOLDER'], exist_ok=True)

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
jwt = JWTManager(app)

# Database Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class FaceSwapJob(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    source_image = db.Column(db.String(255), nullable=False)
    target_image = db.Column(db.String(255), nullable=False)
    result_image = db.Column(db.String(255))
    status = db.Column(db.String(20), default='pending')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

# Face Swapping Functions
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

def detect_faces(image):
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    return faces

def swap_faces(source_img, target_img):
    # Detect faces in both images
    source_faces = detect_faces(source_img)
    target_faces = detect_faces(target_img)
    
    if len(source_faces) == 0 or len(target_faces) == 0:
        return None
    
    # Get the first face from each image
    x1, y1, w1, h1 = source_faces[0]
    x2, y2, w2, h2 = target_faces[0]
    
    # Resize source face to match target face size
    source_face = source_img[y1:y1+h1, x1:x1+w1]
    resized_face = cv2.resize(source_face, (w2, h2))
    
    # Create mask
    mask = np.zeros(resized_face.shape, dtype=np.uint8)
    cv2.circle(mask, (w2//2, h2//2), min(w2, h2)//2, (255, 255, 255), -1)
    
    # Blend faces
    center = (x2 + w2//2, y2 + h2//2)
    output = cv2.seamlessClone(
        resized_face, 
        target_img, 
        mask, 
        center, 
        cv2.NORMAL_CLONE
    )
    
    return output

# Authentication Endpoints
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    hashed_password = bcrypt.generate_password_hash(data['password']).decode('utf-8')
    
    new_user = User(
        username=data['username'],
        email=data['email'],
        password=hashed_password
    )
    
    try:
        db.session.add(new_user)
        db.session.commit()
        return jsonify({'message': 'User created successfully'}), 201
    except:
        return jsonify({'message': 'Username or email already exists'}), 400

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    user = User.query.filter_by(username=data['username']).first()
    
    if user and bcrypt.check_password_hash(user.password, data['password']):
        access_token = create_access_token(identity=user.id)
        return jsonify({
            'access_token': access_token,
            'user_id': user.id,
            'username': user.username
        }), 200
    
    return jsonify({'message': 'Invalid credentials'}), 401

# Face Swapping Endpoints
@app.route('/upload', methods=['POST'])
@jwt_required()
def upload_images():
    if 'source' not in request.files or 'target' not in request.files:
        return jsonify({'error': 'Missing source or target image'}), 400
    
    source_file = request.files['source']
    target_file = request.files['target']
    
    if not allowed_file(source_file.filename) or not allowed_file(target_file.filename):
        return jsonify({'error': 'Invalid file type'}), 400
    
    # Save uploaded files
    source_filename = f"source_{uuid.uuid4()}.jpg"
    target_filename = f"target_{uuid.uuid4()}.jpg"
    source_path = os.path.join(app.config['UPLOAD_FOLDER'], source_filename)
    target_path = os.path.join(app.config['UPLOAD_FOLDER'], target_filename)
    
    source_file.save(source_path)
    target_file.save(target_path)
    
    # Create job record
    user_id = get_jwt_identity()
    new_job = FaceSwapJob(
        user_id=user_id,
        source_image=source_filename,
        target_image=target_filename,
        status='processing'
    )
    
    db.session.add(new_job)
    db.session.commit()
    
    # Process images
    source_img = cv2.imread(source_path)
    target_img = cv2.imread(target_path)
    
    if source_img is None or target_img is None:
        new_job.status = 'failed'
        db.session.commit()
        return jsonify({'error': 'Error reading images'}), 400
    
    result_img = swap_faces(source_img, target_img)
    
    if result_img is None:
        new_job.status = 'failed'
        db.session.commit()
        return jsonify({'error': 'No faces detected'}), 400
    
    # Save result
    result_filename = f"result_{uuid.uuid4()}.jpg"
    result_path = os.path.join(app.config['RESULT_FOLDER'], result_filename)
    cv2.imwrite(result_path, result_img)
    
    # Update job status
    new_job.result_image = result_filename
    new_job.status = 'completed'
    db.session.commit()
    
    return jsonify({
        'job_id': new_job.id,
        'result_url': f'/result/{new_job.id}'
    }), 201

@app.route('/result/<int:job_id>', methods=['GET'])
@jwt_required()
def get_result(job_id):
    job = FaceSwapJob.query.get_or_404(job_id)
    user_id = get_jwt_identity()
    
    if job.user_id != user_id:
        return jsonify({'error': 'Unauthorized'}), 403
    
    if job.status != 'completed':
        return jsonify({'error': 'Job not completed'}), 400
    
    return send_file(os.path.join(app.config['RESULT_FOLDER'], job.result_image))

@app.route('/history', methods=['GET'])
@jwt_required()
def get_history():
    user_id = get_jwt_identity()
    jobs = FaceSwapJob.query.filter_by(user_id=user_id).all()
    
    return jsonify([
        {
            'id': job.id,
            'created_at': job.created_at.isoformat(),
            'status': job.status,
            'result_url': f'/result/{job.id}' if job.status == 'completed' else None
        }
        for job in jobs
    ])

# Admin Endpoints
@app.route('/jobs', methods=['GET'])
@jwt_required()
def get_all_jobs():
    # In real app, add admin check here
    jobs = FaceSwapJob.query.all()
    return jsonify([
        {
            'id': job.id,
            'user_id': job.user_id,
            'status': job.status,
            'created_at': job.created_at.isoformat()
        }
        for job in jobs
    ])

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(host='0.0.0.0', port=5000, debug=True)